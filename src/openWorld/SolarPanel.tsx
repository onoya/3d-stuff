/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/solar-panel/scene.gltf --types -T --shadows
Author: JÃ©ssica Magno (https://sketchfab.com/jessica_magno)
License: CC-BY-NC-ND-4.0 (http://creativecommons.org/licenses/by-nc-nd/4.0/)
Source: https://sketchfab.com/3d-models/painel-solar-85f758903fd84734990fa634eebe508a
Title: Painel Solar
*/

import * as THREE from 'three';
import React, { useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
  };
};

export function SolarPanel(props: JSX.IntrinsicElements['group']) {
  const solarPanel = useRef<THREE.Group>(null);
  const { nodes, materials } = useGLTF(
    '/models/solar-panel/model-transformed.glb'
  ) as GLTFResult;
  const time = useRef(0);
  const [position] = useState<THREE.Vector3>(getInitialPosition());

  function getInitialPosition() {
    const v = new THREE.Vector3(
      (Math.random() * 10 - 5) * 40,
      0,
      (Math.random() * 10 - 5) * 80
    );
    if (v.x < 0) v.x -= 5;
    if (v.x > 0) v.x += 5;

    return v;
  }

  useFrame((state, delta) => {
    if (!solarPanel.current) return;

    time.current += delta * 1.5;
    const newZ = position.z - time.current;

    solarPanel.current.position.set(position.x, position.y, newZ);
  });

  // random number between 1 - 5
  // const random = Math.floor(Math.random() * 5) + 1;

  return (
    <group ref={solarPanel} {...props} dispose={null} scale={0.3}>
      <mesh
        castShadow
        geometry={nodes.Object_4.geometry}
        material={materials.Material}
        rotation={[0, 1, 0]}
      />
    </group>
  );
}

useGLTF.preload('/models/solar-panel/model-transformed.glb');
